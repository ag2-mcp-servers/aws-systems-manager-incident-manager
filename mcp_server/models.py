# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:58:47+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class Arn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
            min_length=0,
            max_length=1000,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    )


class AutomationExecution(BaseModel):
    ssmExecutionArn: Optional[Arn] = None


class AutomationExecutionSet(RootModel[List[AutomationExecution]]):
    root: List[AutomationExecution] = Field(..., max_length=100, min_length=0)


class Boolean(RootModel[bool]):
    root: bool


class ClientToken(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class ConflictException(RootModel[Any]):
    root: Any


class CreateReplicationSetOutput(BaseModel):
    arn: Arn


class CreateResponsePlanOutput(BaseModel):
    arn: Arn


class DedupeString(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class DeleteIncidentRecordInput(BaseModel):
    arn: Arn


class DeleteIncidentRecordOutput(BaseModel):
    pass


class DeleteReplicationSetInput(BaseModel):
    pass


class DeleteReplicationSetOutput(BaseModel):
    pass


class DeleteResourcePolicyOutput(BaseModel):
    pass


class DeleteResponsePlanInput(BaseModel):
    arn: Arn


class DeleteResponsePlanOutput(BaseModel):
    pass


class DeleteTimelineEventOutput(BaseModel):
    pass


class DynamicSsmParametersKeyString(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class EmptyChatChannel(BaseModel):
    pass


class EventData(RootModel[constr(min_length=0, max_length=12000)]):
    root: constr(min_length=0, max_length=12000)


class FilterKeyString(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class GeneratedId(
    RootModel[
        constr(
            pattern=r'^related-item/(ANALYSIS|INCIDENT|METRIC|PARENT|ATTACHMENT|OTHER|AUTOMATION|INVOLVED_RESOURCE|TASK)/([0-9]|[A-F]){32}$',
            min_length=0,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'^related-item/(ANALYSIS|INCIDENT|METRIC|PARENT|ATTACHMENT|OTHER|AUTOMATION|INVOLVED_RESOURCE|TASK)/([0-9]|[A-F]){32}$',
        min_length=0,
        max_length=200,
    )


class GetIncidentRecordInput(BaseModel):
    pass


class GetReplicationSetInput(BaseModel):
    pass


class GetResponsePlanInput(BaseModel):
    pass


class GetTimelineEventInput(BaseModel):
    pass


class Impact(RootModel[conint(ge=1, le=5)]):
    root: conint(ge=1, le=5)


class IncidentRecordStatus(Enum):
    OPEN = 'OPEN'
    RESOLVED = 'RESOLVED'


class IncidentSource(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class IncidentSummary(RootModel[constr(min_length=0, max_length=8000)]):
    root: constr(min_length=0, max_length=8000)


class IncidentTitle(RootModel[constr(min_length=0, max_length=200)]):
    root: constr(min_length=0, max_length=200)


class Integer(RootModel[int]):
    root: int


class IntegerList(RootModel[List[Integer]]):
    root: List[Integer] = Field(..., max_length=100, min_length=0)


class InternalServerException(RootModel[Any]):
    root: Any


class ItemType(Enum):
    ANALYSIS = 'ANALYSIS'
    INCIDENT = 'INCIDENT'
    METRIC = 'METRIC'
    PARENT = 'PARENT'
    ATTACHMENT = 'ATTACHMENT'
    OTHER = 'OTHER'
    AUTOMATION = 'AUTOMATION'
    INVOLVED_RESOURCE = 'INVOLVED_RESOURCE'
    TASK = 'TASK'


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MetricDefinition(RootModel[constr(min_length=0, max_length=4000)]):
    root: constr(min_length=0, max_length=4000)


class NextToken(RootModel[constr(min_length=0, max_length=2000)]):
    root: constr(min_length=0, max_length=2000)


class NotificationTargetItem(BaseModel):
    snsTopicArn: Optional[Arn] = None


class NotificationTargetSet(RootModel[List[NotificationTargetItem]]):
    root: List[NotificationTargetItem] = Field(..., max_length=10, min_length=0)


class PagerDutyConfigurationNameString(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class PagerDutyConfigurationSecretIdString(
    RootModel[constr(min_length=1, max_length=512)]
):
    root: constr(min_length=1, max_length=512)


class PagerDutyIncidentConfigurationServiceIdString(
    RootModel[constr(min_length=1, max_length=200)]
):
    root: constr(min_length=1, max_length=200)


class PagerDutyIncidentDetailIdString(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class PagerDutyIncidentDetailSecretIdString(
    RootModel[constr(min_length=1, max_length=512)]
):
    root: constr(min_length=1, max_length=512)


class Policy(RootModel[constr(min_length=0, max_length=4000)]):
    root: constr(min_length=0, max_length=4000)


class PolicyId(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class PutResourcePolicyInput(BaseModel):
    policy: Policy
    resourceArn: Arn


class PutResourcePolicyOutput(BaseModel):
    policyId: PolicyId


class RawData(RootModel[constr(min_length=0, max_length=10000)]):
    root: constr(min_length=0, max_length=10000)


class RegionName(RootModel[constr(min_length=0, max_length=20)]):
    root: constr(min_length=0, max_length=20)


class RegionStatus(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class RelatedItemTitleString(RootModel[constr(min_length=0, max_length=200)]):
    root: constr(min_length=0, max_length=200)


class ReplicationSetArnList(RootModel[List[Arn]]):
    root: List[Arn]


class ReplicationSetStatus(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResponsePlanDisplayName(RootModel[constr(min_length=0, max_length=200)]):
    root: constr(min_length=0, max_length=200)


class ResponsePlanName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=1, max_length=200)


class ResponsePlanSummary(BaseModel):
    arn: Arn
    displayName: Optional[ResponsePlanDisplayName] = None
    name: ResponsePlanName


class ResponsePlanSummaryList(RootModel[List[ResponsePlanSummary]]):
    root: List[ResponsePlanSummary] = Field(..., max_length=100, min_length=0)


class RoleArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-cn|-us-gov)?:iam::([0-9]{12})?:role/.+$',
            min_length=0,
            max_length=1000,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:iam::([0-9]{12})?:role/.+$',
        min_length=0,
        max_length=1000,
    )


class ServicePrincipal(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SnsArn(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class SseKmsKey(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class SsmAutomationDocumentNameString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.:/]{3,128}$')]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.:/]{3,128}$')


class SsmAutomationDocumentVersionString(
    RootModel[constr(min_length=0, max_length=128)]
):
    root: constr(min_length=0, max_length=128)


class SsmContactsArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-cn|-us-gov)?:ssm-contacts:[a-z0-9-]*:([0-9]{12}):contact/[a-z0-9_-]+$',
            min_length=0,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:ssm-contacts:[a-z0-9-]*:([0-9]{12}):contact/[a-z0-9_-]+$',
        min_length=0,
        max_length=2048,
    )


class SsmParameterValuesMemberString(RootModel[constr(min_length=0, max_length=512)]):
    root: constr(min_length=0, max_length=512)


class SsmParametersKeyString(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class SsmTargetAccount(Enum):
    RESPONSE_PLAN_OWNER_ACCOUNT = 'RESPONSE_PLAN_OWNER_ACCOUNT'
    IMPACTED_ACCOUNT = 'IMPACTED_ACCOUNT'


class StartIncidentOutput(BaseModel):
    incidentRecordArn: Arn


class String(RootModel[str]):
    root: str


class StringListMemberString(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[A-Za-z0-9 _=@:.+-/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!aws:)[A-Za-z0-9 _=@:.+-/]+$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[constr(pattern=r'^[A-Za-z0-9 _=@:.+-/]*$', min_length=0, max_length=256)]
):
    root: constr(pattern=r'^[A-Za-z0-9 _=@:.+-/]*$', min_length=0, max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class TimelineEventSort(Enum):
    EVENT_TIME = 'EVENT_TIME'


class TimelineEventType(RootModel[constr(min_length=0, max_length=100)]):
    root: constr(min_length=0, max_length=100)


class Timestamp(RootModel[datetime]):
    root: datetime


class TriggerDetails(BaseModel):
    rawData: Optional[RawData] = None
    source: IncidentSource
    timestamp: Timestamp
    triggerArn: Optional[Arn] = None


class UUID(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateDeletionProtectionInput(BaseModel):
    arn: Arn
    clientToken: Optional[ClientToken] = None
    deletionProtected: Boolean


class UpdateDeletionProtectionOutput(BaseModel):
    pass


class UpdateIncidentRecordOutput(BaseModel):
    pass


class UpdateRelatedItemsOutput(BaseModel):
    pass


class UpdateReplicationSetOutput(BaseModel):
    pass


class UpdateResponsePlanOutput(BaseModel):
    pass


class UpdateTimelineEventOutput(BaseModel):
    pass


class Url(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class ValidationException(RootModel[Any]):
    root: Any


class VariableType(Enum):
    INCIDENT_RECORD_ARN = 'INCIDENT_RECORD_ARN'
    INVOLVED_RESOURCES = 'INVOLVED_RESOURCES'


class DeleteIncidentRecordPostRequest(BaseModel):
    arn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident record you are deleting.',
    )


class DeleteResourcePolicyPostRequest(BaseModel):
    policyId: constr(min_length=0, max_length=256) = Field(
        ..., description="The ID of the resource policy you're deleting."
    )
    resourceArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description="The Amazon Resource Name (ARN) of the resource you're deleting the policy from.",
    )


class DeleteResponsePlanPostRequest(BaseModel):
    arn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(..., description='The Amazon Resource Name (ARN) of the response plan.')


class DeleteTimelineEventPostRequest(BaseModel):
    eventId: constr(min_length=0, max_length=50) = Field(
        ...,
        description="The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.",
    )
    incidentRecordArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident that includes the timeline event.',
    )


class GetResourcePoliciesResourceArnPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of resource policies to display for each page of results.',
    )
    nextToken: Optional[constr(min_length=0, max_length=2000)] = Field(
        None,
        description='The pagination token to continue to the next page of results.',
    )


class ListRelatedItemsPostRequest(BaseModel):
    incidentRecordArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident record containing the listed related items.',
    )
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of related items per page.'
    )
    nextToken: Optional[constr(min_length=0, max_length=2000)] = Field(
        None,
        description='The pagination token to continue to the next page of results.',
    )


class ListReplicationSetsPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results per page. '
    )
    nextToken: Optional[constr(min_length=0, max_length=2000)] = Field(
        None,
        description='The pagination token to continue to the next page of results.',
    )


class ListResponsePlansPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of response plans per page.'
    )
    nextToken: Optional[constr(min_length=0, max_length=2000)] = Field(
        None,
        description='The pagination token to continue to the next page of results.',
    )


class SortBy(Enum):
    EVENT_TIME = 'EVENT_TIME'


class PutResourcePolicyPostRequest(BaseModel):
    policy: constr(min_length=0, max_length=4000) = Field(
        ..., description='Details of the resource policy.'
    )
    resourceArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the response plan to add the resource policy to.',
    )


class TriggerDetails1(BaseModel):
    rawData: Optional[RawData] = None
    source: Optional[IncidentSource] = None
    timestamp: Optional[Timestamp] = None
    triggerArn: Optional[Arn] = None


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description='A list of tags to add to the response plan.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class UpdateDeletionProtectionPostRequest(BaseModel):
    arn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the replication set to update.',
    )
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that the operation is called only once with the specified details.',
    )
    deletionProtected: bool = Field(
        ...,
        description='Specifies if deletion protection is turned on or off in your account. ',
    )


class Status(Enum):
    OPEN = 'OPEN'
    RESOLVED = 'RESOLVED'


class AddRegionAction(BaseModel):
    regionName: RegionName
    sseKmsKeyId: Optional[SseKmsKey] = None


class ChatbotSnsConfigurationSet(RootModel[List[SnsArn]]):
    root: List[SnsArn] = Field(..., max_length=5, min_length=1)


class CreateTimelineEventOutput(BaseModel):
    eventId: UUID
    incidentRecordArn: Arn


class DeleteRegionAction(BaseModel):
    regionName: RegionName


class DeleteResourcePolicyInput(BaseModel):
    policyId: PolicyId
    resourceArn: Arn


class DeleteTimelineEventInput(BaseModel):
    eventId: UUID
    incidentRecordArn: Arn


class DynamicSsmParameterValue(BaseModel):
    variable: Optional[VariableType] = None


class DynamicSsmParameters(RootModel[Optional[Dict[str, DynamicSsmParameterValue]]]):
    root: Optional[Dict[str, DynamicSsmParameterValue]] = None


class EngagementSet(RootModel[List[SsmContactsArn]]):
    root: List[SsmContactsArn] = Field(..., max_length=5, min_length=0)


class EventReference(BaseModel):
    relatedItemId: Optional[GeneratedId] = None
    resource: Optional[Arn] = None


class EventReferenceList(RootModel[List[EventReference]]):
    root: List[EventReference] = Field(..., max_length=10, min_length=0)


class EventSummary(BaseModel):
    eventId: UUID
    eventReferences: Optional[EventReferenceList] = None
    eventTime: Timestamp
    eventType: TimelineEventType
    eventUpdatedTime: Timestamp
    incidentRecordArn: Arn


class EventSummaryList(RootModel[List[EventSummary]]):
    root: List[EventSummary] = Field(..., max_length=100, min_length=0)


class GetResourcePoliciesInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class IncidentRecordSource(BaseModel):
    createdBy: Arn
    invokedBy: Optional[ServicePrincipal] = None
    resourceArn: Optional[Arn] = None
    source: IncidentSource


class IncidentRecordSummary(BaseModel):
    arn: Arn
    creationTime: Timestamp
    impact: Impact
    incidentRecordSource: IncidentRecordSource
    resolvedTime: Optional[Timestamp] = None
    status: IncidentRecordStatus
    title: IncidentTitle


class IncidentRecordSummaryList(RootModel[List[IncidentRecordSummary]]):
    root: List[IncidentRecordSummary] = Field(..., max_length=100, min_length=0)


class ListIncidentRecordsOutput(BaseModel):
    incidentRecordSummaries: IncidentRecordSummaryList
    nextToken: Optional[NextToken] = None


class ListRelatedItemsInput(BaseModel):
    incidentRecordArn: Arn
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListReplicationSetsInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListReplicationSetsOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    replicationSetArns: ReplicationSetArnList


class ListResponsePlansInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListResponsePlansOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    responsePlanSummaries: ResponsePlanSummaryList


class ListTimelineEventsOutput(BaseModel):
    eventSummaries: EventSummaryList
    nextToken: Optional[NextToken] = None


class PagerDutyIncidentConfiguration(BaseModel):
    serviceId: PagerDutyIncidentConfigurationServiceIdString


class PagerDutyIncidentDetail(BaseModel):
    autoResolve: Optional[Boolean] = None
    id: PagerDutyIncidentDetailIdString
    secretId: Optional[PagerDutyIncidentDetailSecretIdString] = None


class RegionInfo(BaseModel):
    sseKmsKeyId: Optional[SseKmsKey] = None
    status: RegionStatus
    statusMessage: Optional[String] = None
    statusUpdateDateTime: Timestamp


class RegionInfoMap(RootModel[Optional[Dict[str, RegionInfo]]]):
    root: Optional[Dict[str, RegionInfo]] = None


class RegionMapInputValue(BaseModel):
    sseKmsKeyId: Optional[SseKmsKey] = None


class ReplicationSet(BaseModel):
    arn: Optional[Arn] = None
    createdBy: Arn
    createdTime: Timestamp
    deletionProtected: Boolean
    lastModifiedBy: Arn
    lastModifiedTime: Timestamp
    regionMap: RegionInfoMap
    status: ReplicationSetStatus


class ResourcePolicy(BaseModel):
    policyDocument: Policy
    policyId: PolicyId
    ramResourceShareRegion: String


class ResourcePolicyList(RootModel[List[ResourcePolicy]]):
    root: List[ResourcePolicy] = Field(..., max_length=100, min_length=0)


class SsmParameterValues(RootModel[List[SsmParameterValuesMemberString]]):
    root: List[SsmParameterValuesMemberString] = Field(
        ..., max_length=100, min_length=0
    )


class SsmParameters(RootModel[Optional[Dict[str, SsmParameterValues]]]):
    root: Optional[Dict[str, SsmParameterValues]] = None


class StringList(RootModel[List[StringListMemberString]]):
    root: List[StringListMemberString] = Field(..., max_length=100, min_length=0)


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagMapUpdate(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class TimelineEvent(BaseModel):
    eventData: EventData
    eventId: UUID
    eventReferences: Optional[EventReferenceList] = None
    eventTime: Timestamp
    eventType: TimelineEventType
    eventUpdatedTime: Timestamp
    incidentRecordArn: Arn


class UpdateReplicationSetAction(BaseModel):
    addRegionAction: Optional[AddRegionAction] = None
    deleteRegionAction: Optional[DeleteRegionAction] = None


class UpdateReplicationSetInputActionsList(RootModel[List[UpdateReplicationSetAction]]):
    root: List[UpdateReplicationSetAction] = Field(..., max_length=1, min_length=1)


class UpdateTimelineEventInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    eventData: Optional[EventData] = None
    eventId: UUID
    eventReferences: Optional[EventReferenceList] = None
    eventTime: Optional[Timestamp] = None
    eventType: Optional[TimelineEventType] = None
    incidentRecordArn: Arn


class CreateReplicationSetPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that the operation is called only once with the specified details.',
    )
    regions: Dict[str, RegionMapInputValue] = Field(
        ...,
        description='The Regions that Incident Manager replicates your data to. You can have up to three Regions in your replication set.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='A list of tags to add to the replication set.'
    )


class ChatChannel(BaseModel):
    chatbotSns: Optional[ChatbotSnsConfigurationSet] = None
    empty: Optional[EmptyChatChannel] = None


class IncidentTemplate1(BaseModel):
    dedupeString: Optional[DedupeString] = None
    impact: Optional[Impact] = None
    incidentTags: Optional[TagMap] = None
    notificationTargets: Optional[NotificationTargetSet] = None
    summary: Optional[IncidentSummary] = None
    title: Optional[IncidentTitle] = None


class CreateTimelineEventPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that a client calls the action only once with the specified details.',
    )
    eventData: constr(min_length=0, max_length=12000) = Field(
        ..., description='A short description of the event.'
    )
    eventReferences: Optional[List[EventReference]] = Field(
        None,
        description="Adds one or more references to the <code>TimelineEvent</code>. A reference is an Amazon Web Services resource involved or associated with the incident. To specify a reference, enter its Amazon Resource Name (ARN). You can also specify a related item associated with a resource. For example, to specify an Amazon DynamoDB (DynamoDB) table as a resource, use the table's ARN. You can also specify an Amazon CloudWatch metric associated with the DynamoDB table as a related item.",
        max_length=10,
        min_length=0,
    )
    eventTime: datetime = Field(..., description='The time that the event occurred.')
    eventType: constr(min_length=0, max_length=100) = Field(
        ...,
        description='The type of event. You can create timeline events of type <code>Custom Event</code>.',
    )
    incidentRecordArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident record that the action adds the incident to.',
    )


class UpdateIncidentRecordPostRequest(BaseModel):
    arn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident record you are updating.',
    )
    chatChannel: Optional[ChatChannel] = Field(
        None,
        description='The Chatbot chat channel used for collaboration during an incident.',
    )
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that a client calls the operation only once with the specified details.',
    )
    impact: Optional[conint(ge=1, le=5)] = Field(
        None,
        description='<p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li> <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li> <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li> <li> <p> <code>4</code> - Low impact, customer aren\'t impacted by the problem yet.</p> </li> <li> <p> <code>5</code> - No impact, customers aren\'t currently impacted but urgent action is needed to avoid impact.</p> </li> </ul>',
    )
    notificationTargets: Optional[List[NotificationTargetItem]] = Field(
        None,
        description='<p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p> <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>',
        max_length=10,
        min_length=0,
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.',
    )
    summary: Optional[constr(min_length=0, max_length=8000)] = Field(
        None, description='A longer description of what occurred during the incident.'
    )
    title: Optional[constr(min_length=0, max_length=200)] = Field(
        None, description='A brief description of the incident.'
    )


class UpdateReplicationSetPostRequest(BaseModel):
    actions: List[UpdateReplicationSetAction] = Field(
        ...,
        description='An action to add or delete a Region.',
        max_length=1,
        min_length=1,
    )
    arn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description="The Amazon Resource Name (ARN) of the replication set you're updating.",
    )
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that the operation is called only once with the specified details.',
    )


class UpdateTimelineEventPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that a client calls the operation only once with the specified details.',
    )
    eventData: Optional[constr(min_length=0, max_length=12000)] = Field(
        None, description='A short description of the event.'
    )
    eventId: constr(min_length=0, max_length=50) = Field(
        ...,
        description="The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.",
    )
    eventReferences: Optional[List[EventReference]] = Field(
        None,
        description="<p>Updates all existing references in a <code>TimelineEvent</code>. A reference is an Amazon Web Services resource involved or associated with the incident. To specify a reference, enter its Amazon Resource Name (ARN). You can also specify a related item associated with that resource. For example, to specify an Amazon DynamoDB (DynamoDB) table as a resource, use its ARN. You can also specify an Amazon CloudWatch metric associated with the DynamoDB table as a related item.</p> <important> <p>This update action overrides all existing references. If you want to keep existing references, you must specify them in the call. If you don't, this action removes any existing references and enters only new references.</p> </important>",
        max_length=10,
        min_length=0,
    )
    eventTime: Optional[datetime] = Field(
        None, description='The time that the event occurred.'
    )
    eventType: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description='The type of event. You can update events of type <code>Custom Event</code>.',
    )
    incidentRecordArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident that includes the timeline event.',
    )


class AttributeValueList(BaseModel):
    integerValues: Optional[IntegerList] = None
    stringValues: Optional[StringList] = None


class Condition(BaseModel):
    after: Optional[Timestamp] = None
    before: Optional[Timestamp] = None
    equals: Optional[AttributeValueList] = None


class CreateTimelineEventInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    eventData: EventData
    eventReferences: Optional[EventReferenceList] = None
    eventTime: Timestamp
    eventType: TimelineEventType
    incidentRecordArn: Arn


class Filter(BaseModel):
    condition: Condition
    key: FilterKeyString


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=5, min_length=0)


class GetReplicationSetOutput(BaseModel):
    replicationSet: ReplicationSet


class GetResourcePoliciesOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    resourcePolicies: ResourcePolicyList


class GetTimelineEventOutput(BaseModel):
    event: TimelineEvent


class IncidentRecord(BaseModel):
    arn: Arn
    automationExecutions: Optional[AutomationExecutionSet] = None
    chatChannel: Optional[ChatChannel] = None
    creationTime: Timestamp
    dedupeString: DedupeString
    impact: Impact
    incidentRecordSource: IncidentRecordSource
    lastModifiedBy: Arn
    lastModifiedTime: Timestamp
    notificationTargets: Optional[NotificationTargetSet] = None
    resolvedTime: Optional[Timestamp] = None
    status: IncidentRecordStatus
    summary: Optional[IncidentSummary] = None
    title: IncidentTitle


class IncidentTemplate(BaseModel):
    dedupeString: Optional[DedupeString] = None
    impact: Impact
    incidentTags: Optional[TagMap] = None
    notificationTargets: Optional[NotificationTargetSet] = None
    summary: Optional[IncidentSummary] = None
    title: IncidentTitle


class ItemValue(BaseModel):
    arn: Optional[Arn] = None
    metricDefinition: Optional[MetricDefinition] = None
    pagerDutyIncidentDetail: Optional[PagerDutyIncidentDetail] = None
    url: Optional[Url] = None


class ListIncidentRecordsInput(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: TagMap


class ListTimelineEventsInput(BaseModel):
    filters: Optional[FilterList] = None
    incidentRecordArn: Arn
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    sortBy: Optional[TimelineEventSort] = None
    sortOrder: Optional[SortOrder] = None


class PagerDutyConfiguration(BaseModel):
    name: PagerDutyConfigurationNameString
    pagerDutyIncidentConfiguration: PagerDutyIncidentConfiguration
    secretId: PagerDutyConfigurationSecretIdString


class RegionMapInput(RootModel[Optional[Dict[str, RegionMapInputValue]]]):
    root: Optional[Dict[str, RegionMapInputValue]] = None


class SsmAutomation(BaseModel):
    documentName: SsmAutomationDocumentNameString
    documentVersion: Optional[SsmAutomationDocumentVersionString] = None
    dynamicParameters: Optional[DynamicSsmParameters] = None
    parameters: Optional[SsmParameters] = None
    roleArn: RoleArn
    targetAccount: Optional[SsmTargetAccount] = None


class UpdateIncidentRecordInput(BaseModel):
    arn: Arn
    chatChannel: Optional[ChatChannel] = None
    clientToken: Optional[ClientToken] = None
    impact: Optional[Impact] = None
    notificationTargets: Optional[NotificationTargetSet] = None
    status: Optional[IncidentRecordStatus] = None
    summary: Optional[IncidentSummary] = None
    title: Optional[IncidentTitle] = None


class UpdateReplicationSetInput(BaseModel):
    actions: UpdateReplicationSetInputActionsList
    arn: Arn
    clientToken: Optional[ClientToken] = None


class ListIncidentRecordsPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description="<p>Filters the list of incident records you want to search through. You can filter on the following keys:</p> <ul> <li> <p> <code>creationTime</code> </p> </li> <li> <p> <code>impact</code> </p> </li> <li> <p> <code>status</code> </p> </li> <li> <p> <code>createdBy</code> </p> </li> </ul> <p>Note the following when when you use Filters:</p> <ul> <li> <p>If you don't specify a Filter, the response includes all incident records.</p> </li> <li> <p>If you specify more than one filter in a single request, the response returns incident records that match all filters.</p> </li> <li> <p>If you specify a filter with more than one value, the response returns incident records that match any of the values provided.</p> </li> </ul>",
        max_length=5,
        min_length=0,
    )
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results per page.'
    )
    nextToken: Optional[constr(min_length=0, max_length=2000)] = Field(
        None,
        description='The pagination token to continue to the next page of results.',
    )


class ListTimelineEventsPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description="<p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p> <ul> <li> <p> <code>eventTime</code> </p> </li> <li> <p> <code>eventType</code> </p> </li> </ul> <p>Note the following when deciding how to use Filters:</p> <ul> <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li> <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li> <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li> </ul>",
        max_length=5,
        min_length=0,
    )
    incidentRecordArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident that includes the timeline event.',
    )
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results per page.'
    )
    nextToken: Optional[constr(min_length=0, max_length=2000)] = Field(
        None,
        description='The pagination token to continue to the next page of results.',
    )
    sortBy: Optional[SortBy] = Field(
        None, description='Sort timeline events by the specified key value pair.'
    )
    sortOrder: Optional[SortOrder] = Field(
        None,
        description='Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.',
    )


class Action(BaseModel):
    ssmAutomation: Optional[SsmAutomation] = None


class ActionsList(RootModel[List[Action]]):
    root: List[Action] = Field(..., max_length=1, min_length=0)


class CreateReplicationSetInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    regions: RegionMapInput
    tags: Optional[TagMap] = None


class GetIncidentRecordOutput(BaseModel):
    incidentRecord: IncidentRecord


class Integration(BaseModel):
    pagerDutyConfiguration: Optional[PagerDutyConfiguration] = None


class Integrations(RootModel[List[Integration]]):
    root: List[Integration] = Field(..., max_length=1, min_length=0)


class ItemIdentifier(BaseModel):
    type: ItemType
    value: ItemValue


class RelatedItem(BaseModel):
    generatedId: Optional[GeneratedId] = None
    identifier: ItemIdentifier
    title: Optional[RelatedItemTitleString] = None


class RelatedItemList(RootModel[List[RelatedItem]]):
    root: List[RelatedItem] = Field(..., max_length=100, min_length=0)


class RelatedItemsUpdate(BaseModel):
    itemToAdd: Optional[RelatedItem] = None
    itemToRemove: Optional[ItemIdentifier] = None


class StartIncidentInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    impact: Optional[Impact] = None
    relatedItems: Optional[RelatedItemList] = None
    responsePlanArn: Arn
    title: Optional[IncidentTitle] = None
    triggerDetails: Optional[TriggerDetails] = None


class UpdateRelatedItemsInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    incidentRecordArn: Arn
    relatedItemsUpdate: RelatedItemsUpdate


class UpdateResponsePlanInput(BaseModel):
    actions: Optional[ActionsList] = None
    arn: Arn
    chatChannel: Optional[ChatChannel] = None
    clientToken: Optional[ClientToken] = None
    displayName: Optional[ResponsePlanDisplayName] = None
    engagements: Optional[EngagementSet] = None
    incidentTemplateDedupeString: Optional[DedupeString] = None
    incidentTemplateImpact: Optional[Impact] = None
    incidentTemplateNotificationTargets: Optional[NotificationTargetSet] = None
    incidentTemplateSummary: Optional[IncidentSummary] = None
    incidentTemplateTags: Optional[TagMapUpdate] = None
    incidentTemplateTitle: Optional[IncidentTitle] = None
    integrations: Optional[Integrations] = None


class CreateResponsePlanPostRequest(BaseModel):
    actions: Optional[List[Action]] = Field(
        None,
        description='The actions that the response plan starts at the beginning of an incident.',
        max_length=1,
        min_length=0,
    )
    chatChannel: Optional[ChatChannel] = Field(
        None,
        description='The Chatbot chat channel used for collaboration during an incident.',
    )
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token ensuring that the operation is called only once with the specified details.',
    )
    displayName: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        description='The long format of the response plan name. This field can contain spaces.',
    )
    engagements: Optional[List[SsmContactsArn]] = Field(
        None,
        description='The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.',
        max_length=5,
        min_length=0,
    )
    incidentTemplate: IncidentTemplate1 = Field(
        ...,
        description='Basic details used in creating a response plan. The response plan is then used to create an incident record.',
    )
    integrations: Optional[List[Integration]] = Field(
        None,
        description='Information about third-party services integrated into the response plan.',
        max_length=1,
        min_length=0,
    )
    name: constr(pattern=r'^[a-zA-Z0-9-_]*$', min_length=1, max_length=200) = Field(
        ...,
        description="The short format name of the response plan. Can't include spaces.",
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='A list of tags that you are adding to the response plan.'
    )


class StartIncidentPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token ensuring that the operation is called only once with the specified details.',
    )
    impact: Optional[conint(ge=1, le=5)] = Field(
        None,
        description='<p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>1</code> - Critical impact, this typically relates to full application failure that impacts many to all customers. </p> </li> <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li> <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li> <li> <p> <code>4</code> - Low impact, customer might aren\'t impacted by the problem yet.</p> </li> <li> <p> <code>5</code> - No impact, customers aren\'t currently impacted but urgent action is needed to avoid impact.</p> </li> </ul>',
    )
    relatedItems: Optional[List[RelatedItem]] = Field(
        None,
        description='Add related items to the incident for other responders to use. Related items are Amazon Web Services resources, external links, or files uploaded to an Amazon S3 bucket. ',
        max_length=100,
        min_length=0,
    )
    responsePlanArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident. ',
    )
    title: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        description='Provide a title for the incident. Providing a title overwrites the title provided by the response plan. ',
    )
    triggerDetails: Optional[TriggerDetails1] = Field(
        None,
        description='Details about what caused the incident to be created in Incident Manager.',
    )


class UpdateRelatedItemsPostRequest(BaseModel):
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token that ensures that a client calls the operation only once with the specified details.',
    )
    incidentRecordArn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the incident record that contains the related items that you update.',
    )
    relatedItemsUpdate: RelatedItemsUpdate = Field(
        ..., description="Details about the related item you're adding."
    )


class UpdateResponsePlanPostRequest(BaseModel):
    actions: Optional[List[Action]] = Field(
        None,
        description='The actions that this response plan takes at the beginning of an incident.',
        max_length=1,
        min_length=0,
    )
    arn: constr(
        pattern=r'^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        min_length=0,
        max_length=1000,
    ) = Field(..., description='The Amazon Resource Name (ARN) of the response plan.')
    chatChannel: Optional[ChatChannel] = Field(
        None,
        description='The Chatbot chat channel used for collaboration during an incident.',
    )
    clientToken: Optional[constr(min_length=0, max_length=128)] = Field(
        None,
        description='A token ensuring that the operation is called only once with the specified details.',
    )
    displayName: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        description="The long format name of the response plan. The display name can't contain spaces.",
    )
    engagements: Optional[List[SsmContactsArn]] = Field(
        None,
        description='The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.',
        max_length=5,
        min_length=0,
    )
    incidentTemplateDedupeString: Optional[constr(min_length=0, max_length=1000)] = (
        Field(
            None,
            description='The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.',
        )
    )
    incidentTemplateImpact: Optional[conint(ge=1, le=5)] = Field(
        None,
        description='<p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>5</code> - Severe impact</p> </li> <li> <p> <code>4</code> - High impact</p> </li> <li> <p> <code>3</code> - Medium impact</p> </li> <li> <p> <code>2</code> - Low impact</p> </li> <li> <p> <code>1</code> - No impact</p> </li> </ul>',
    )
    incidentTemplateNotificationTargets: Optional[List[NotificationTargetItem]] = Field(
        None,
        description='The Amazon SNS targets that are notified when updates are made to an incident.',
        max_length=10,
        min_length=0,
    )
    incidentTemplateSummary: Optional[constr(min_length=0, max_length=8000)] = Field(
        None,
        description="A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.",
    )
    incidentTemplateTags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.',
    )
    incidentTemplateTitle: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        description="The short format name of the incident. The title can't contain spaces.",
    )
    integrations: Optional[List[Integration]] = Field(
        None,
        description='Information about third-party services integrated into the response plan.',
        max_length=1,
        min_length=0,
    )


class CreateResponsePlanInput(BaseModel):
    actions: Optional[ActionsList] = None
    chatChannel: Optional[ChatChannel] = None
    clientToken: Optional[ClientToken] = None
    displayName: Optional[ResponsePlanDisplayName] = None
    engagements: Optional[EngagementSet] = None
    incidentTemplate: IncidentTemplate
    integrations: Optional[Integrations] = None
    name: ResponsePlanName
    tags: Optional[TagMap] = None


class GetResponsePlanOutput(BaseModel):
    actions: Optional[ActionsList] = None
    arn: Arn
    chatChannel: Optional[ChatChannel] = None
    displayName: Optional[ResponsePlanDisplayName] = None
    engagements: Optional[EngagementSet] = None
    incidentTemplate: IncidentTemplate
    integrations: Optional[Integrations] = None
    name: ResponsePlanName


class ListRelatedItemsOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    relatedItems: RelatedItemList
